/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package business;

import java.awt.Color;
import java.awt.Font;
import java.awt.Toolkit;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import beans.CourseBean;
import beans.EmployeeBean;
import beans.PermissionBean;
import dao.CourseDao;
import daoimpl.CourseDaoImpl;
import daoimpl.RolePermissionDaoImpl;
import utility.CurrentDate;
import utility.UtilityMethods;

/**
 *
 * @author Amjad Ali Dahri
 */
public class CourseFrame extends javax.swing.JFrame {

    /**
     * Creates new form CourseFrame
     */
    EmployeeBean emp = null;
    CourseDao courseDao = new CourseDaoImpl();

    public CourseFrame() {
        initComponents();
        this.getContentPane().setBackground(Color.WHITE);
        this.emp = LoginFrame.userBean;
        Toolkit t = Toolkit.getDefaultToolkit();
        this.setSize(t.getScreenSize().width, t.getScreenSize().height);
        this.setLocationRelativeTo(null);
        coursetable.getTableHeader().setFont(new Font("Tahoma",Font.BOLD,16));
        hideAllButtons();
        checkPermissions();
        fillMainCourseCombo();
        populateCourseTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        maincombo = new javax.swing.JComboBox<>();
        durationtxt = new javax.swing.JTextField();
        subcoursetxt = new javax.swing.JTextField();
        addlbl = new javax.swing.JLabel();
        updatelbl = new javax.swing.JLabel();
        deletelbl = new javax.swing.JLabel();
        resetlbl = new javax.swing.JLabel();
        subLabel = new javax.swing.JLabel();
        durationLabel = new javax.swing.JLabel();
        mainLabel = new javax.swing.JLabel();
        close = new javax.swing.JLabel();
        courseHeader = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        coursetable = new javax.swing.JTable();
        searchField = new javax.swing.JTextField();
        searchLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        maincombo.setFont(new java.awt.Font("Century Gothic", 0, 15)); // NOI18N
        maincombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Main Course", " " }));
        maincombo.setBorder(null);
        maincombo.setOpaque(false);
        maincombo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                maincomboMouseClicked(evt);
            }
        });
        jPanel1.add(maincombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 30, 220, 40));

        durationtxt.setFont(new java.awt.Font("Century Gothic", 0, 15)); // NOI18N
        durationtxt.setText("Enter duration of the course");
        durationtxt.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        durationtxt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                durationtxtFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                durationtxtFocusLost(evt);
            }
        });
        jPanel1.add(durationtxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 150, 220, 40));

        subcoursetxt.setFont(new java.awt.Font("Century Gothic", 0, 15)); // NOI18N
        subcoursetxt.setText("Enter sub course here");
        subcoursetxt.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        subcoursetxt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                subcoursetxtFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                subcoursetxtFocusLost(evt);
            }
        });
        jPanel1.add(subcoursetxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 90, 220, 40));

        addlbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/addbtn.png"))); // NOI18N
        addlbl.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addlbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addlblMouseClicked(evt);
            }
        });
        jPanel1.add(addlbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 300, -1, 50));

        updatelbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/updatebtn.png"))); // NOI18N
        updatelbl.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        updatelbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                updatelblMouseClicked(evt);
            }
        });
        jPanel1.add(updatelbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 300, 170, 50));

        deletelbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/deletebtn.png"))); // NOI18N
        deletelbl.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        deletelbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deletelblMouseClicked(evt);
            }
        });
        jPanel1.add(deletelbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 370, 170, 50));

        resetlbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/resetbtn.png"))); // NOI18N
        resetlbl.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        resetlbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                resetlblMouseClicked(evt);
            }
        });
        jPanel1.add(resetlbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 360, 160, 70));

        subLabel.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        subLabel.setText("Sub Course");
        jPanel1.add(subLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, 110, 40));

        durationLabel.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        durationLabel.setText("Duration");
        jPanel1.add(durationLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 150, 110, 40));

        mainLabel.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        mainLabel.setText("Main Course");
        jPanel1.add(mainLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 110, 30));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 130, 360, 620));

        close.setFont(new java.awt.Font("Tahoma", 0, 22)); // NOI18N
        close.setForeground(new java.awt.Color(255, 255, 255));
        close.setText("X");
        close.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        close.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                closeMouseClicked(evt);
            }
        });
        getContentPane().add(close, new org.netbeans.lib.awtextra.AbsoluteConstraints(1330, 20, -1, 30));

        courseHeader.setBackground(new java.awt.Color(0, 102, 0));
        courseHeader.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        courseHeader.setForeground(new java.awt.Color(255, 255, 255));
        courseHeader.setText("                                                                                    COURSES");
        courseHeader.setOpaque(true);
        getContentPane().add(courseHeader, new org.netbeans.lib.awtextra.AbsoluteConstraints(-2, 0, 1370, 70));

        coursetable.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        coursetable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Course Id", "Course Name", "Parent Course", "Duration"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        coursetable.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        coursetable.setRowHeight(20);
        coursetable.setRowMargin(2);
        coursetable.setSelectionBackground(new java.awt.Color(0, 102, 0));
        coursetable.getTableHeader().setResizingAllowed(false);
        coursetable.getTableHeader().setReorderingAllowed(false);
        coursetable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                coursetableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(coursetable);
        if (coursetable.getColumnModel().getColumnCount() > 0) {
            coursetable.getColumnModel().getColumn(0).setResizable(false);
            coursetable.getColumnModel().getColumn(1).setResizable(false);
            coursetable.getColumnModel().getColumn(2).setResizable(false);
            coursetable.getColumnModel().getColumn(3).setResizable(false);
        }

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 130, 980, 620));

        searchField.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        searchField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                searchFieldKeyPressed(evt);
            }
        });
        getContentPane().add(searchField, new org.netbeans.lib.awtextra.AbsoluteConstraints(1150, 80, 210, 40));

        searchLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        searchLabel.setText("Search");
        getContentPane().add(searchLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(1090, 80, 60, 40));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void closeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeMouseClicked
//         new MainFrame().setVisible(true);
//        this.dispose();
    }//GEN-LAST:event_closeMouseClicked

    private void subcoursetxtFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_subcoursetxtFocusGained
        if (subcoursetxt.getText().equalsIgnoreCase("Enter sub course here")) {
            subcoursetxt.setText("");
        }
    }//GEN-LAST:event_subcoursetxtFocusGained

    private void subcoursetxtFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_subcoursetxtFocusLost
        if (subcoursetxt.getText().isEmpty()) {
            subcoursetxt.setText("Enter sub course here");
        }
    }//GEN-LAST:event_subcoursetxtFocusLost

    private void durationtxtFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_durationtxtFocusGained
        if (durationtxt.getText().equalsIgnoreCase("Enter duration of the course")) {
            durationtxt.setText("");
        }
    }//GEN-LAST:event_durationtxtFocusGained

    private void durationtxtFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_durationtxtFocusLost
        if (durationtxt.getText().isEmpty()) {
            durationtxt.setText("Enter duration of the course");
        }
    }//GEN-LAST:event_durationtxtFocusLost

    private void addlblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addlblMouseClicked
        if (coursetable.getSelectedRow() == -1) {
            CourseBean course = new CourseBean();
            CourseBean mainCourse = null;
            if (!subcoursetxt.getText().equals("") && !durationtxt.getText().equals("") && !subcoursetxt.getText().equalsIgnoreCase("Enter sub course here") && !durationtxt.getText().equalsIgnoreCase("Enter duration of the course")) {
                if (maincombo.getSelectedIndex() > 0) {
                    List<CourseBean> mainCourses = courseDao.getAllParentCourses();
                    for (CourseBean c : mainCourses) {
                        if (c.getCourseName().equals(maincombo.getSelectedItem().toString())) {
                            mainCourse = c;
                        }
                    }
                } else {
                    mainCourse = new CourseBean();
                    mainCourse.setCourseId(0);
                }
                course.setCourseName(subcoursetxt.getText());
                course.setCourseDuration(durationtxt.getText());
                course.setMainCourse(mainCourse);
                course.setCreatedBy(emp.getEmpId());
                course.setCreatedDate(CurrentDate.getCurrentDate() + "");
                if (courseDao.addCourse(course) > 0) {
                    populateCourseTable();
                    fillMainCourseCombo();
                    clearFields();
                } else {
                    new MessageForm("Error", "Course not added", "error.png").setVisible(true);
                }
            }
        } else {
            new MessageForm("Error", "Record is duplicate", "error.png").setVisible(true);
        }
    }//GEN-LAST:event_addlblMouseClicked

    private void maincomboMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_maincomboMouseClicked

    }//GEN-LAST:event_maincomboMouseClicked

    private void coursetableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_coursetableMouseClicked

        if (coursetable.getValueAt(coursetable.getSelectedRow(), 2) != null) {
            maincombo.setEnabled(true);
            maincombo.setSelectedItem(coursetable.getValueAt(coursetable.getSelectedRow(), 2));
        } else {
            maincombo.setSelectedIndex(0);
            maincombo.setEnabled(false);
        }
        subcoursetxt.setText(coursetable.getValueAt(coursetable.getSelectedRow(), 1).toString());
        durationtxt.setText(coursetable.getValueAt(coursetable.getSelectedRow(), 3).toString());
    }//GEN-LAST:event_coursetableMouseClicked

    private void updatelblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updatelblMouseClicked
        if (coursetable.getSelectedRow() != -1) {
            CourseBean course = new CourseBean();
            CourseBean parentCourse = new CourseBean();
            course.setCourseId(Integer.parseInt(coursetable.getValueAt(coursetable.getSelectedRow(), 0).toString()));
            if (!subcoursetxt.getText().equals("") && !durationtxt.getText().equals("")) {
                course.setCourseName(subcoursetxt.getText());
                course.setCourseDuration(durationtxt.getText());
                if (maincombo.getSelectedIndex() == 0) {
                    parentCourse.setCourseId(0);
                } else {
                    List<CourseBean> courses = courseDao.getAllCourses();
                    for (CourseBean c : courses) {
                        if (c.getCourseName().equals(maincombo.getSelectedItem().toString())) {
                            parentCourse = c;
                            break;
                        }
                    }
                }
                course.setMainCourse(parentCourse);
                course.setModifiedBy(emp.getEmpId());
                course.setModifiedDate(CurrentDate.getCurrentDate() + "");
                if (courseDao.updateCourse(course) > 0) {
                    populateCourseTable();
                    fillMainCourseCombo();
                    clearFields();
                } else {
                    new MessageForm("Error", "Course not updated", "error.png").setVisible(true);
                }
            }
        } else {
            new MessageForm("Error", "Record not selected", "error.png").setVisible(true);
        }
    }//GEN-LAST:event_updatelblMouseClicked

    private void deletelblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deletelblMouseClicked
        if (coursetable.getSelectedRow() != -1) {
            CourseBean course = new CourseBean();
            course.setCourseId(Integer.parseInt(coursetable.getValueAt(coursetable.getSelectedRow(), 0).toString()));
            course.setModifiedBy(emp.getEmpId());
            course.setModifiedDate(CurrentDate.getCurrentDate() + "");
            if (courseDao.deleteCourse(course) > 0) {
                populateCourseTable();
                fillMainCourseCombo();
                clearFields();
            } else {
                new MessageForm("Error", "Course not deleted", "error.png");
            }
        } else {
            new MessageForm("Error", "Record not selected", "error.png").setVisible(true);
        }
    }//GEN-LAST:event_deletelblMouseClicked

    private void resetlblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resetlblMouseClicked
        clearFields();
    }//GEN-LAST:event_resetlblMouseClicked

    private void searchFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchFieldKeyPressed
        UtilityMethods.searchDataFromTable(coursetable, searchField);
    }//GEN-LAST:event_searchFieldKeyPressed

    private void fillMainCourseCombo() {
        List<CourseBean> courses = courseDao.getAllParentCourses();
        maincombo.removeAllItems();
        maincombo.addItem("Select Main Course");
        for (CourseBean course : courses) {
            maincombo.addItem(course.getCourseName());
        }
    }

    private void populateCourseTable() {
        DefaultTableModel dtm = (DefaultTableModel) coursetable.getModel();
        dtm.setRowCount(0);
        List<CourseBean> courses = courseDao.getAllCourses();
        for (CourseBean course : courses) {
            Object[] values = {course.getCourseId(), course.getCourseName(), course.getMainCourse().getCourseName(), course.getCourseDuration()};
            dtm.addRow(values);
        }
    }

    private void clearFields() {
        maincombo.setSelectedIndex(0);
        subcoursetxt.setText("Enter sub course here");
        durationtxt.setText("Enter duration of the course");
        maincombo.setEnabled(true);
        coursetable.clearSelection();
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CourseFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CourseFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CourseFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CourseFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        EmployeeBean emp = new EmployeeBean();
        emp.setEmpId(1);
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CourseFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel addlbl;
    private javax.swing.JLabel close;
    private javax.swing.JLabel courseHeader;
    private javax.swing.JTable coursetable;
    private javax.swing.JLabel deletelbl;
    private javax.swing.JLabel durationLabel;
    private javax.swing.JTextField durationtxt;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel mainLabel;
    private javax.swing.JComboBox<String> maincombo;
    private javax.swing.JLabel resetlbl;
    private javax.swing.JTextField searchField;
    private javax.swing.JLabel searchLabel;
    private javax.swing.JLabel subLabel;
    private javax.swing.JTextField subcoursetxt;
    private javax.swing.JLabel updatelbl;
    // End of variables declaration//GEN-END:variables

    private void hideAllButtons() {
        addlbl.setVisible(false);
        updatelbl.setVisible(false);
        deletelbl.setVisible(false);
    }

    private void checkPermissions() {
        List<PermissionBean> permissions = new RolePermissionDaoImpl().getAssignedPermissions(LoginFrame.userBean.getRole());
        for (PermissionBean pb : permissions) {
            if (pb.getPermission().equals("Add Course")) {
                addlbl.setVisible(true);
            }
            if (pb.getPermission().equals("Update Course")) {
                updatelbl.setVisible(true);
            }
            if (pb.getPermission().equals("Delete Course")) {
                deletelbl.setVisible(true);
            }
        }
    }
}
