/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package business;

import java.awt.Color;
import java.awt.Cursor;
import java.awt.Font;
import java.awt.Toolkit;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import beans.BatchBean;
import beans.BridgeBean;
import beans.CourseBean;
import beans.FeesBean;
import beans.ShiftBean;
import beans.StudentBean;
import daoimpl.BatchDaoImpl;
import daoimpl.BridgeDaoImpl;
import daoimpl.CourseDaoImpl;
import daoimpl.FeesDaoImpl;
import daoimpl.ShiftDaoImpl;
import daoimpl.StudentDaoImpl;
import utility.UtilityMethods;

/**
 *
 * @author Bilal Bhatti
 */
public class StudentCourseAssignmentFrame extends javax.swing.JFrame {

    private static final String nameSearchTip = "Search Student By Name";
    private DefaultTableModel studentTableModel;
    private DefaultTableModel bridgeTableModel;

    private List<CourseBean> courseList;
    private ArrayList<ShiftBean> shiftList;
    private List<BatchBean> batchList;

    /**
     * Creates new form StudentCourseAssignmentFrame
     */
    public StudentCourseAssignmentFrame() {
        this.setUndecorated(true);
        initComponents();
        Toolkit t = Toolkit.getDefaultToolkit();
        this.setSize(t.getScreenSize().width,t.getScreenSize().height);
        this.setLocationRelativeTo(null);
        this.getContentPane().setBackground(Color.white);
        studentTable.getTableHeader().setFont(new Font("Tahoma", Font.BOLD, 16));
        studentTableModel = (DefaultTableModel) studentTable.getModel();
        refreshStudentTable();

        bridgeTable.getTableHeader().setFont(new Font("Tahoma", Font.BOLD, 16));
        bridgeTableModel = (DefaultTableModel) bridgeTable.getModel();
        refreshBridgeTable();

        refershCourseCombo();
        refreshShiftCombo();
        refreshBatchCombo();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bridgeTablePanel = new javax.swing.JPanel();
        bridgeTableScrollPanel = new javax.swing.JScrollPane();
        bridgeTable = new javax.swing.JTable();
        assignedCourseSearchLabel = new javax.swing.JLabel();
        courseField = new javax.swing.JTextField();
        studentTablePanel = new javax.swing.JPanel();
        studentTableScorllPanel = new javax.swing.JScrollPane();
        studentTable = new javax.swing.JTable();
        nameSearchField = new javax.swing.JTextField();
        searchStudentLabel = new javax.swing.JLabel();
        cross_icon = new javax.swing.JLabel();
        courseAssignmentHeader = new javax.swing.JLabel();
        courseInfoPanel = new javax.swing.JPanel();
        deleteBtn = new javax.swing.JLabel();
        updateBtn = new javax.swing.JLabel();
        assignBtn = new javax.swing.JLabel();
        resetlbl = new javax.swing.JLabel();
        courseCombo = new javax.swing.JComboBox<>();
        batchCombo = new javax.swing.JComboBox<>();
        shiftCombo = new javax.swing.JComboBox<>();
        courseBatchLabel = new javax.swing.JLabel();
        courseShiftLabel = new javax.swing.JLabel();
        courseDetailLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        bridgeTablePanel.setBackground(new java.awt.Color(255, 255, 255));
        bridgeTablePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2), "Assigned Courses", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 16))); // NOI18N
        bridgeTablePanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        bridgeTable.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        bridgeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "S_ID", "BT_ID", "Course Name", "Batch Name", "Shift Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        bridgeTable.setRowHeight(20);
        bridgeTable.setRowMargin(2);
        bridgeTable.setSelectionBackground(new java.awt.Color(0, 102, 0));
        bridgeTable.getTableHeader().setResizingAllowed(false);
        bridgeTable.getTableHeader().setReorderingAllowed(false);
        bridgeTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bridgeTableMouseClicked(evt);
            }
        });
        bridgeTableScrollPanel.setViewportView(bridgeTable);

        bridgeTablePanel.add(bridgeTableScrollPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 880, 190));

        assignedCourseSearchLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        assignedCourseSearchLabel.setText("Search");
        bridgeTablePanel.add(assignedCourseSearchLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 20, 60, 40));

        courseField.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        courseField.setForeground(new java.awt.Color(153, 153, 153));
        courseField.setToolTipText("Enter Student Name to Sort the Record");
        courseField.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        courseField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                courseFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                courseFieldFocusLost(evt);
            }
        });
        courseField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                courseFieldKeyReleased(evt);
            }
        });
        bridgeTablePanel.add(courseField, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 20, 260, 40));

        getContentPane().add(bridgeTablePanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 480, 900, 270));

        studentTablePanel.setBackground(new java.awt.Color(255, 255, 255));
        studentTablePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2), "Select Student", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 16))); // NOI18N
        studentTablePanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        studentTable.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        studentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Student Name", "Surname", "Guardian Name", "CNIC", "Gender"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        studentTable.setToolTipText("All Enrolled Students");
        studentTable.setRowHeight(20);
        studentTable.setRowMargin(2);
        studentTable.setSelectionBackground(new java.awt.Color(0, 102, 0));
        studentTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        studentTable.getTableHeader().setResizingAllowed(false);
        studentTable.getTableHeader().setReorderingAllowed(false);
        studentTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                studentTableMouseClicked(evt);
            }
        });
        studentTableScorllPanel.setViewportView(studentTable);

        studentTablePanel.add(studentTableScorllPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 880, 310));

        nameSearchField.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        nameSearchField.setForeground(new java.awt.Color(153, 153, 153));
        nameSearchField.setText("Search Student By Name");
        nameSearchField.setToolTipText("Enter Student Name to Sort the Record");
        nameSearchField.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        nameSearchField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                nameSearchFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                nameSearchFieldFocusLost(evt);
            }
        });
        nameSearchField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                nameSearchFieldKeyReleased(evt);
            }
        });
        studentTablePanel.add(nameSearchField, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 20, 260, 40));

        searchStudentLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        searchStudentLabel.setText("Search");
        studentTablePanel.add(searchStudentLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 20, 60, 40));

        getContentPane().add(studentTablePanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 90, 900, 390));

        cross_icon.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        cross_icon.setForeground(new java.awt.Color(255, 255, 255));
        cross_icon.setText("X");
        cross_icon.setToolTipText("Close");
        cross_icon.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cross_icon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cross_iconMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                cross_iconMouseEntered(evt);
            }
        });
        getContentPane().add(cross_icon, new org.netbeans.lib.awtextra.AbsoluteConstraints(1340, 20, 20, 30));

        courseAssignmentHeader.setBackground(new java.awt.Color(0, 102, 0));
        courseAssignmentHeader.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        courseAssignmentHeader.setForeground(new java.awt.Color(255, 255, 255));
        courseAssignmentHeader.setText("                                                                                    COURSE ASSIGNMENT");
        courseAssignmentHeader.setOpaque(true);
        getContentPane().add(courseAssignmentHeader, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1370, 70));

        courseInfoPanel.setBackground(new java.awt.Color(255, 255, 255));
        courseInfoPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2), "Course Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 16))); // NOI18N
        courseInfoPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        deleteBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/deletebtn.png"))); // NOI18N
        deleteBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteBtnMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                deleteBtnMouseEntered(evt);
            }
        });
        courseInfoPanel.add(deleteBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 320, -1, 50));

        updateBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/updatebtn.png"))); // NOI18N
        updateBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                updateBtnMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                updateBtnMouseEntered(evt);
            }
        });
        courseInfoPanel.add(updateBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 250, 170, 50));

        assignBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/addbtn.png"))); // NOI18N
        assignBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                assignBtnMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                assignBtnMouseEntered(evt);
            }
        });
        courseInfoPanel.add(assignBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 250, -1, -1));

        resetlbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/resetbtn.png"))); // NOI18N
        resetlbl.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        resetlbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                resetlblMouseClicked(evt);
            }
        });
        courseInfoPanel.add(resetlbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 320, 170, 50));

        courseCombo.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        courseCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Course", "C++", "Java", "C#", "Python" }));
        courseCombo.setToolTipText("Course Name");
        courseCombo.setBorder(null);
        courseCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                courseComboItemStateChanged(evt);
            }
        });
        courseInfoPanel.add(courseCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 30, 310, 40));

        batchCombo.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        batchCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Batch", "2k16", "F16", "2k17", "2k18" }));
        batchCombo.setToolTipText("Batch Name");
        batchCombo.setBorder(null);
        batchCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                batchComboItemStateChanged(evt);
            }
        });
        courseInfoPanel.add(batchCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 90, 310, 40));

        shiftCombo.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        shiftCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Shift", "Morning 8 to 10", "Evening 5 to 9 " }));
        shiftCombo.setToolTipText("Shift Name");
        shiftCombo.setBorder(null);
        shiftCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                shiftComboItemStateChanged(evt);
            }
        });
        courseInfoPanel.add(shiftCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 150, 310, 40));

        courseBatchLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        courseBatchLabel.setText("Batch");
        courseInfoPanel.add(courseBatchLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 90, 80, 40));

        courseShiftLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        courseShiftLabel.setText("Shift");
        courseInfoPanel.add(courseShiftLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 150, 80, 40));

        courseDetailLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        courseDetailLabel.setText("Course");
        courseInfoPanel.add(courseDetailLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, 70, 40));

        getContentPane().add(courseInfoPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, 440, 660));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cross_iconMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cross_iconMouseEntered
        // TODO add your handling code here:
        cross_icon.setCursor(new Cursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_cross_iconMouseEntered

    private void cross_iconMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cross_iconMouseClicked
//        new MainFrame().setVisible(true);
//        this.dispose();
    }//GEN-LAST:event_cross_iconMouseClicked

    private void studentTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_studentTableMouseClicked
        // TODO add your handling code here:
        int selectedRow = studentTable.getSelectedRow();
        String student_id = studentTable.getValueAt(selectedRow, 0).toString();

        TableRowSorter tableRowSorter = new TableRowSorter(bridgeTable.getModel());
        bridgeTable.setRowSorter(tableRowSorter);
        //Sort the record according to index specified by column_index;
        int column_index = 0; //index 1 represents sutdent id
        tableRowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + student_id, column_index));


    }//GEN-LAST:event_studentTableMouseClicked
    private void refreshStudentTable() {

        studentTableModel.setNumRows(0);
        studentTable.getColumnModel().getColumn(0).setWidth(0);
        studentTable.getColumnModel().getColumn(0).setMinWidth(0);
        studentTable.getColumnModel().getColumn(0).setMaxWidth(0);

        ResultSet rs = new StudentDaoImpl().getAllStudents();

        if (rs != null) {
            try {
                StudentBean student;
                while (rs.next()) {
                    student = new StudentBean();
                    student.setStudentId(rs.getInt("s_id"));
                    student.setStudentName(rs.getString("s_name"));
                    student.setSurname(rs.getString("surname"));
                    student.setGender(rs.getString("gender"));
                    student.setGuardian(rs.getString("guardian"));
                    student.setStudentNic(rs.getString("cnic"));
                    studentTableModel.addRow(new Object[]{
                        student.getStudentId(),
                        student.getStudentName(),
                        student.getSurname(),
                        student.getGuardian(),
                        student.getStudentNic(),
                        student.getGender()});
                }
            } catch (SQLException sqle) {
                System.out.println("Exception is Student Fee Frame in refreshStudentTable() Method...");
                System.out.println(sqle.getMessage());
            }
        }
    }

    private void refreshBridgeTable() {

        //Removing all the pervious rows
        bridgeTableModel.setNumRows(0);

        bridgeTable.getColumnModel().getColumn(0).setWidth(0);
        bridgeTable.getColumnModel().getColumn(0).setMinWidth(0);
        bridgeTable.getColumnModel().getColumn(0).setMaxWidth(0);

        bridgeTable.getColumnModel().getColumn(1).setWidth(0);
        bridgeTable.getColumnModel().getColumn(1).setMinWidth(0);
        bridgeTable.getColumnModel().getColumn(1).setMaxWidth(0);

        try {
            ResultSet rs = new BridgeDaoImpl().getAllRecords();
            BridgeBean bridge;
            while (rs.next()) {
                bridge = new BridgeBean();
                bridge.setBridgeId(rs.getInt("bt_id"));

                BatchBean batch = new BatchDaoImpl().getBatchById(rs.getInt("batch_id"));
                bridge.setBatch(batch);
                CourseBean course = new CourseDaoImpl().getCourseById(rs.getInt("course_id"));
                bridge.setCourse(course);
                ShiftBean shift = new ShiftDaoImpl().getShiftById(rs.getInt("shift_id"));
                bridge.setShift(shift);
                StudentBean student = new StudentDaoImpl().getStudentById(rs.getInt("student_id"));
                bridge.setStudent(student);

                bridgeTableModel.addRow(new Object[]{
                    bridge.getStudent().getStudentId(),
                    bridge.getBridgeId(),
                    bridge.getCourse().getCourseName(),
                    bridge.getBatch().getBatchName(),
                    bridge.getShift().getShiftName()
                });

            }
        } catch (SQLException sqle) {
            System.out.println("Exception in StudentCourseAssignmentFrame at refreshBridgeTable() method.");
            System.out.println(sqle.getMessage());
        }

    }

    private void refershCourseCombo() {
        courseList = new CourseDaoImpl().getAllCourses();
        courseCombo.removeAllItems();
        courseCombo.addItem("Select Course");
        for (CourseBean course : courseList) {
            courseCombo.addItem(course.getCourseName());
        }

    }

    private void refreshBatchCombo() {
        batchList = new BatchDaoImpl().getAllBatches();
        batchCombo.removeAllItems();
        batchCombo.addItem("Select Batch");
        for (BatchBean batch : batchList) {
            batchCombo.addItem(batch.getBatchName());
        }

    }

    private void refreshShiftCombo() {
        shiftList = new ArrayList<>();
        try {
            ResultSet rs = new ShiftDaoImpl().getAllShifts();
            ShiftBean shift;
            shiftCombo.removeAllItems();
            shiftCombo.addItem("Select Shift");
            while (rs.next()) {
                shift = new ShiftBean();
                shift.setShiftId(rs.getInt("shift_id"));
                shift.setShiftName(rs.getString("shift_title"));
                shift.setEndTime(rs.getString("start_time"));
                shift.setEndTime(rs.getString("end_time"));
                shiftCombo.addItem(shift.getShiftName());
                shiftList.add(shift);
            }
        } catch (SQLException sqle) {
            System.out.println("Exception in StudentCourseAssingment Frame in refreshShiftCombo() method");
            System.out.println(sqle.getMessage());
        }
    }


    private void nameSearchFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_nameSearchFieldFocusGained
        // TODO add your handling code here:
        if (nameSearchField.getText().equals(nameSearchTip)) {
            nameSearchField.setText("");
        }
    }//GEN-LAST:event_nameSearchFieldFocusGained

    private void nameSearchFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_nameSearchFieldFocusLost
        // TODO add your handling code here:
        if (nameSearchField.getText().isEmpty()) {
            nameSearchField.setForeground(new Color(153, 153, 153));
            nameSearchField.setFont(new Font("Century Gothic", Font.PLAIN, 18));
            nameSearchField.setText(nameSearchTip);
        }
    }//GEN-LAST:event_nameSearchFieldFocusLost

    private void nameSearchFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nameSearchFieldKeyReleased
        // TODO add your handling code here:
        UtilityMethods.searchDataFromTable(studentTable, nameSearchField);
    }//GEN-LAST:event_nameSearchFieldKeyReleased

    private void assignBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_assignBtnMouseEntered
        // TODO add your handling code here:
        assignBtn.setCursor(new Cursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_assignBtnMouseEntered

    private void updateBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateBtnMouseEntered
        // TODO add your handling code here:
        updateBtn.setCursor(new Cursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_updateBtnMouseEntered

    private void deleteBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteBtnMouseEntered
        // TODO add your handling code here:
        deleteBtn.setCursor(new Cursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_deleteBtnMouseEntered

    private boolean validateForm() {
        boolean ok = true;
        if (courseCombo.getSelectedIndex() == 0) {
            courseCombo.setBorder(BorderFactory.createLineBorder(Color.RED, 1));
            ok = false;
        }
        if (batchCombo.getSelectedIndex() == 0) {
            ok = false;
            batchCombo.setBorder(BorderFactory.createLineBorder(Color.RED, 1));
        }
        if (shiftCombo.getSelectedIndex() == 0) {
            shiftCombo.setBorder(BorderFactory.createLineBorder(Color.RED, 1));
            ok = false;
        }
        return ok;
    }

    private void resetFields() {
        batchCombo.setSelectedIndex(0);
        courseCombo.setSelectedIndex(0);
        shiftCombo.setSelectedIndex(0);
        studentTable.clearSelection();
        bridgeTable.clearSelection();
    }

    private void assignBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_assignBtnMouseClicked
        // TODO add your handling code here:
        int student_table_selected_row = studentTable.getSelectedRow();
        if (student_table_selected_row >= 0) {

            if (validateForm()) {

                int co_indx = courseCombo.getSelectedIndex();
                int ba_indx = batchCombo.getSelectedIndex();
                int sh_indx = shiftCombo.getSelectedIndex();

                Integer courseId = courseList.get(co_indx - 1).getCourseId();
                Integer batchId = batchList.get(ba_indx - 1).getBatchId();
                Integer shiftId = shiftList.get(sh_indx - 1).getShiftId();
                Integer studentId = new Integer(studentTable.getValueAt(student_table_selected_row, 0).toString());

                BridgeBean bridge = new BridgeBean();

                CourseBean course = new CourseBean();
                course.setCourseId(courseId);
                bridge.setCourse(course);

                BatchBean batch = new BatchBean();
                batch.setBatchId(batchId);
                bridge.setBatch(batch);

                ShiftBean shift = new ShiftBean();
                shift.setShiftId(shiftId);
                bridge.setShift(shift);

                StudentBean student = new StudentBean();
                student.setStudentId(studentId);
                bridge.setStudent(student);

                bridge.setCreatedBy(41);
                bridge.setCreatedDate(new Date() + "");

                int response = new BridgeDaoImpl().addBridge(bridge);
                if (response == 1) {
                    refreshBridgeTable();
                    resetFields();
                }
            }
        } else {
            new MessageForm("Selection Error", "Please Select Student From Student Table First", "error.png").setVisible(true);
        }
    }//GEN-LAST:event_assignBtnMouseClicked

    private void updateBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateBtnMouseClicked
        // TODO add your handling code here:
        int student_table_selected_row = studentTable.getSelectedRow();
        int bridge_table_selected_row = bridgeTable.getSelectedRow();
        if (student_table_selected_row >= 0) {
            if (bridge_table_selected_row >= 0) {

                if (validateForm()) {

                    int co_indx = courseCombo.getSelectedIndex();
                    int ba_indx = batchCombo.getSelectedIndex();
                    int sh_indx = shiftCombo.getSelectedIndex();

                    Integer courseId = courseList.get(co_indx - 1).getCourseId();
                    Integer batchId = batchList.get(ba_indx - 1).getBatchId();
                    Integer shiftId = shiftList.get(sh_indx - 1).getShiftId();
                    Integer studentId = new Integer(studentTable.getValueAt(student_table_selected_row, 0).toString());
                    Integer bridgeId = new Integer(bridgeTable.getValueAt(bridge_table_selected_row, 1).toString());

                    BridgeBean bridge = new BridgeBean();

                    bridge.setBridgeId(bridgeId);

                    CourseBean course = new CourseBean();
                    course.setCourseId(courseId);
                    bridge.setCourse(course);

                    BatchBean batch = new BatchBean();
                    batch.setBatchId(batchId);
                    bridge.setBatch(batch);

                    ShiftBean shift = new ShiftBean();
                    shift.setShiftId(shiftId);
                    bridge.setShift(shift);

                    StudentBean student = new StudentBean();
                    student.setStudentId(studentId);
                    bridge.setStudent(student);

                    bridge.setModifiedBy(41);
                    bridge.setModifiedDate(new Date() + "");

                    if (ensureAllRecordsEmpty(bridge)) {

                        int response = new BridgeDaoImpl().updateBridge(bridge);
                        if (response == 1) {
                            new MessageForm("Success","Record updated","success.png").setVisible(true);
                            refreshBridgeTable();
                            resetFields();
                        }
                    } else {
                        JOptionPane.showMessageDialog(updateBtn, "First Delete All Fees For That Course", "Error in deletion", JOptionPane.ERROR_MESSAGE);
                    }
                }
            } else {
                new MessageForm("Selection Error", "Please Select Course Form Course Table First", "error.png").setVisible(true);
            }
        } else {
            new MessageForm("Selection Error", "Please Select Student Form Student Table First", "error.png").setVisible(true);
        }
    }//GEN-LAST:event_updateBtnMouseClicked

    private boolean ensureAllRecordsEmpty(BridgeBean bridge) {
        try {
            ResultSet rs = new FeesDaoImpl().getAllFees();
            FeesBean fees;
            while (rs.next()) {
                fees = new FeesBean();
                fees.setFeesId(rs.getInt("fees_id"));
                BridgeBean bridge2 = new BridgeBean();
                bridge2.setBridgeId(rs.getInt("bt_id"));
                fees.setBridgeId(bridge2);

                if (bridge2.equals(bridge)) {
                    return false;
                }

            }
            return true;

        } catch (SQLException sqle) {
            System.out.println("Excepiton in ensureAllRecordsEmpty() method of StudentCourseAssignment Frame");
            System.out.println(sqle.getMessage());
            return false;
        }

    }

    private void deleteBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteBtnMouseClicked
        // TODO add your handling code here:
        int student_table_selected_row = studentTable.getSelectedRow();
        int bridge_table_selected_row = bridgeTable.getSelectedRow();

        if (student_table_selected_row >= 0) {
            if (bridge_table_selected_row >= 0) {
                Integer bridgeId = new Integer(bridgeTable.getValueAt(bridge_table_selected_row, 1).toString());

                BridgeBean bridge = new BridgeBean();
                bridge.setBridgeId(bridgeId);
                bridge.setModifiedBy(41);
                bridge.setModifiedDate(new Date() + "");

                if (ensureAllRecordsEmpty(bridge)) {

                    int response = new BridgeDaoImpl().deleteBridge(bridge);
                    if (response == 1) {
                        new MessageForm("Success","Record deleted","success.png").setVisible(true);
                        refreshBridgeTable();
                        resetFields();
                    }
                } else {
                    new MessageForm("Error", "Frist Delete All Fees For That Course", "error.png").setVisible(true);
                }

            } else {
                new MessageForm("Error", "Please Select Course Form Course Table First", "error.png").setVisible(true);
            }
        } else {
            new MessageForm("Error", "Select the Student From Student Table First", "error.png").setVisible(true);
        }
    }//GEN-LAST:event_deleteBtnMouseClicked

    private void courseComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_courseComboItemStateChanged
        // TODO add your handling code here:
        courseCombo.setBorder(null);

    }//GEN-LAST:event_courseComboItemStateChanged

    private void batchComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_batchComboItemStateChanged
        // TODO add your handling code here:
        batchCombo.setBorder(null);
    }//GEN-LAST:event_batchComboItemStateChanged

    private void shiftComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_shiftComboItemStateChanged
        // TODO add your handling code here:
        shiftCombo.setBorder(null);
    }//GEN-LAST:event_shiftComboItemStateChanged

    private void bridgeTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bridgeTableMouseClicked
        // TODO add your handling code here:
        int bridge_table_selected_row = bridgeTable.getSelectedRow();
        if (bridge_table_selected_row >= 0) {
            courseCombo.setSelectedItem(bridgeTable.getValueAt(bridge_table_selected_row, 2).toString());
            batchCombo.setSelectedItem(bridgeTable.getValueAt(bridge_table_selected_row, 3).toString());
            shiftCombo.setSelectedItem(bridgeTable.getValueAt(bridge_table_selected_row, 4).toString());
        }
    }//GEN-LAST:event_bridgeTableMouseClicked

    private void courseFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_courseFieldFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_courseFieldFocusGained

    private void courseFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_courseFieldFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_courseFieldFocusLost

    private void courseFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_courseFieldKeyReleased
        UtilityMethods.searchDataFromTable(bridgeTable, courseField);
    }//GEN-LAST:event_courseFieldKeyReleased

    private void resetlblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resetlblMouseClicked
      resetFields();
    }//GEN-LAST:event_resetlblMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StudentCourseAssignmentFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StudentCourseAssignmentFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StudentCourseAssignmentFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StudentCourseAssignmentFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StudentCourseAssignmentFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel assignBtn;
    private javax.swing.JLabel assignedCourseSearchLabel;
    private javax.swing.JComboBox<String> batchCombo;
    private javax.swing.JTable bridgeTable;
    private javax.swing.JPanel bridgeTablePanel;
    private javax.swing.JScrollPane bridgeTableScrollPanel;
    private javax.swing.JLabel courseAssignmentHeader;
    private javax.swing.JLabel courseBatchLabel;
    private javax.swing.JComboBox<String> courseCombo;
    private javax.swing.JLabel courseDetailLabel;
    private javax.swing.JTextField courseField;
    private javax.swing.JPanel courseInfoPanel;
    private javax.swing.JLabel courseShiftLabel;
    private javax.swing.JLabel cross_icon;
    private javax.swing.JLabel deleteBtn;
    private javax.swing.JTextField nameSearchField;
    private javax.swing.JLabel resetlbl;
    private javax.swing.JLabel searchStudentLabel;
    private javax.swing.JComboBox<String> shiftCombo;
    private javax.swing.JTable studentTable;
    private javax.swing.JPanel studentTablePanel;
    private javax.swing.JScrollPane studentTableScorllPanel;
    private javax.swing.JLabel updateBtn;
    // End of variables declaration//GEN-END:variables
}
