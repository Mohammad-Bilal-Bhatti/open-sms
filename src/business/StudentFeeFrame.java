/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package business;

import java.awt.Color;
import java.awt.Cursor;
import java.awt.Font;
import java.awt.Toolkit;
import java.io.FileOutputStream;
import java.io.OutputStream;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import javax.swing.BorderFactory;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.border.BevelBorder;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import utility.DateFormatter;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.view.JasperViewer;
import beans.BatchBean;
import beans.BridgeBean;
import beans.CourseBean;
import beans.FeesBean;
import beans.FeesTypeBean;
import beans.PermissionBean;
import beans.ShiftBean;

import beans.StudentBean;
import connection.DBConnection;
import daoimpl.BatchDaoImpl;
import daoimpl.BridgeDaoImpl;
import daoimpl.CourseDaoImpl;
import daoimpl.FeeTypeDaoImpl;
import daoimpl.FeesDaoImpl;
import daoimpl.RolePermissionDaoImpl;
import daoimpl.ShiftDaoImpl;
import daoimpl.StudentDaoImpl;
import utility.NumToWord;
import utility.UtilityMethods;

/**
 *
 * @author Bilal Bhatti
 */
public class StudentFeeFrame extends javax.swing.JFrame {

    private static final String nameSearchTip = "Search Student By Name";
    private static final String feesAmountTip = "Fees Amount e.g[1000]";
    private static final String feesAmountRequiredTip = "Fees Amount is Required";
    private static final String feesAmountCorrectTip = "Enter Amount In Correct Format e.g[1000.00]";

    private DefaultTableModel studentTableModel;
    private DefaultTableModel studentFeeTableModel;

    private ArrayList<FeesTypeBean> feesTypeList;

    //Using this Array List because to access the bridge id according to index...
    private ArrayList<BridgeBean> studentBridgeList;

    /**
     * Creates new form StudentFeeFrame
     */
    public StudentFeeFrame() {
        this.setUndecorated(true);
        initComponents();
        Toolkit t = Toolkit.getDefaultToolkit();
        this.setSize(t.getScreenSize().width, t.getScreenSize().height);
        this.getContentPane().setBackground(Color.white);
        this.setLocationRelativeTo(null);
        hideAllButtons();
        checkPermissions();
        populateFeesTypeCombo();

        studentTable.getTableHeader().setFont(new Font("Tahoma", Font.BOLD, 16));
        studentFeeTable.getTableHeader().setFont(new Font("Tahoma", Font.BOLD, 16));
        studentTableModel = (DefaultTableModel) studentTable.getModel();
        refreshStudentTable();

        studentFeeTableModel = (DefaultTableModel) studentFeeTable.getModel();
        refreshStudentFeeTable();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        studentTablePanel = new javax.swing.JPanel();
        studentTableScorllPanel = new javax.swing.JScrollPane();
        studentTable = new javax.swing.JTable();
        nameSearchField = new javax.swing.JTextField();
        searchStudentField = new javax.swing.JLabel();
        crossBtn = new javax.swing.JLabel();
        feesHeader = new javax.swing.JLabel();
        feeDataEntryPanel = new javax.swing.JPanel();
        courseCombo = new javax.swing.JComboBox<>();
        feesTypeCombo = new javax.swing.JComboBox<>();
        numberOfMonthsCombo = new javax.swing.JComboBox<>();
        feesAmountField = new javax.swing.JTextField();
        datetxt = new com.toedter.calendar.JDateChooser();
        courseLabel = new javax.swing.JLabel();
        feeAmountLabel = new javax.swing.JLabel();
        noOfMonthsLabel = new javax.swing.JLabel();
        paymentDateLabel = new javax.swing.JLabel();
        feeTypeLabel = new javax.swing.JLabel();
        addlbl = new javax.swing.JLabel();
        updatelbl = new javax.swing.JLabel();
        printSlipBtn = new javax.swing.JLabel();
        resetlbl = new javax.swing.JLabel();
        deletelbl = new javax.swing.JLabel();
        studentFeeTablePanel = new javax.swing.JPanel();
        studentFeeTableScrollPanel = new javax.swing.JScrollPane();
        studentFeeTable = new javax.swing.JTable();
        feesfield = new javax.swing.JTextField();
        paidFeeSearchLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        studentTablePanel.setBackground(new java.awt.Color(255, 255, 255));
        studentTablePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2), "Select Student", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 16))); // NOI18N
        studentTablePanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        studentTable.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        studentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Student Name", "Surname", "Guardian Name", "CNIC", "Gender"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        studentTable.setToolTipText("All Enrolled Students");
        studentTable.setRowHeight(20);
        studentTable.setRowMargin(2);
        studentTable.setSelectionBackground(new java.awt.Color(0, 102, 0));
        studentTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        studentTable.getTableHeader().setResizingAllowed(false);
        studentTable.getTableHeader().setReorderingAllowed(false);
        studentTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                studentTableMouseClicked(evt);
            }
        });
        studentTableScorllPanel.setViewportView(studentTable);

        studentTablePanel.add(studentTableScorllPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 850, 240));

        nameSearchField.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        nameSearchField.setForeground(new java.awt.Color(153, 153, 153));
        nameSearchField.setText("Search Student By Name");
        nameSearchField.setToolTipText("Enter Student Name to Sort the Record");
        nameSearchField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                nameSearchFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                nameSearchFieldFocusLost(evt);
            }
        });
        nameSearchField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                nameSearchFieldKeyReleased(evt);
            }
        });
        studentTablePanel.add(nameSearchField, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 20, 260, 40));

        searchStudentField.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        searchStudentField.setText("Search");
        studentTablePanel.add(searchStudentField, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 20, 60, 40));

        getContentPane().add(studentTablePanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 100, 870, 320));

        crossBtn.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        crossBtn.setForeground(new java.awt.Color(255, 255, 255));
        crossBtn.setText("X");
        crossBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        crossBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                crossBtnMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                crossBtnMouseEntered(evt);
            }
        });
        getContentPane().add(crossBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(1330, 20, 20, -1));

        feesHeader.setBackground(new java.awt.Color(0, 102, 0));
        feesHeader.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        feesHeader.setForeground(new java.awt.Color(255, 255, 255));
        feesHeader.setText("                                                                                               FEES ");
        feesHeader.setOpaque(true);
        getContentPane().add(feesHeader, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1370, 70));

        feeDataEntryPanel.setBackground(new java.awt.Color(255, 255, 255));
        feeDataEntryPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2), "Fees Info", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 16))); // NOI18N
        feeDataEntryPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        courseCombo.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        courseCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Course", "C++", "Java", "HTML/CSS/JS", "Illustrator", "Adobe PhotoShop", "Python" }));
        courseCombo.setToolTipText("Full Course Name");
        courseCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                courseComboItemStateChanged(evt);
            }
        });
        feeDataEntryPanel.add(courseCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 110, 320, 40));

        feesTypeCombo.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        feesTypeCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Fee Type", "Monthly", "Admisstion", "Certificate" }));
        feesTypeCombo.setToolTipText("Fees Type");
        feesTypeCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                feesTypeComboItemStateChanged(evt);
            }
        });
        feeDataEntryPanel.add(feesTypeCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 60, 320, 40));

        numberOfMonthsCombo.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        numberOfMonthsCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Number Of Months", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" }));
        numberOfMonthsCombo.setToolTipText("Number of Months");
        numberOfMonthsCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                numberOfMonthsComboItemStateChanged(evt);
            }
        });
        feeDataEntryPanel.add(numberOfMonthsCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 210, 320, 40));

        feesAmountField.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        feesAmountField.setText("Fees Amount e.g[1000]");
        feesAmountField.setToolTipText("Ammount of Fees");
        feesAmountField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                feesAmountFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                feesAmountFieldFocusLost(evt);
            }
        });
        feeDataEntryPanel.add(feesAmountField, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 160, 320, 40));

        datetxt.setDateFormatString("dd MMMM yyyy");
        datetxt.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        feeDataEntryPanel.add(datetxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 260, 320, 40));

        courseLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        courseLabel.setText("Course");
        feeDataEntryPanel.add(courseLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, 120, 40));

        feeAmountLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        feeAmountLabel.setText("Fee Amount");
        feeDataEntryPanel.add(feeAmountLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 160, 120, 40));

        noOfMonthsLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        noOfMonthsLabel.setText("No of months");
        feeDataEntryPanel.add(noOfMonthsLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 210, 120, 40));

        paymentDateLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        paymentDateLabel.setText("Date of paid");
        feeDataEntryPanel.add(paymentDateLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 260, 120, 40));

        feeTypeLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        feeTypeLabel.setText("Fee Type");
        feeDataEntryPanel.add(feeTypeLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 120, 40));

        addlbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/addbtn.png"))); // NOI18N
        addlbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addlblMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                addlblMouseEntered(evt);
            }
        });
        feeDataEntryPanel.add(addlbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 380, 170, 50));

        updatelbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/updatebtn.png"))); // NOI18N
        updatelbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                updatelblMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                updatelblMouseEntered(evt);
            }
        });
        feeDataEntryPanel.add(updatelbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 380, 170, -1));

        printSlipBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/print_slip.png"))); // NOI18N
        printSlipBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                printSlipBtnMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                printSlipBtnMouseEntered(evt);
            }
        });
        feeDataEntryPanel.add(printSlipBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 520, -1, -1));

        resetlbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/resetbtn.png"))); // NOI18N
        resetlbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                resetlblMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                resetlblMouseEntered(evt);
            }
        });
        feeDataEntryPanel.add(resetlbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 450, 160, 50));

        deletelbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/deletebtn.png"))); // NOI18N
        deletelbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deletelblMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                deletelblMouseEntered(evt);
            }
        });
        feeDataEntryPanel.add(deletelbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 450, 170, 50));

        getContentPane().add(feeDataEntryPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, 480, 600));

        studentFeeTablePanel.setBackground(new java.awt.Color(255, 255, 255));
        studentFeeTablePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2), "Paid Fees Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 16))); // NOI18N
        studentFeeTablePanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        studentFeeTable.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        studentFeeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Fee_ID", "S_ID", "Paid Date", "Amount", "No Of Months", "Fee Type", "Full Course Name", "Bt_id"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        studentFeeTable.setRowHeight(20);
        studentFeeTable.setRowMargin(2);
        studentFeeTable.setSelectionBackground(new java.awt.Color(0, 102, 0));
        studentFeeTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        studentFeeTable.getTableHeader().setResizingAllowed(false);
        studentFeeTable.getTableHeader().setReorderingAllowed(false);
        studentFeeTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                studentFeeTableMouseClicked(evt);
            }
        });
        studentFeeTableScrollPanel.setViewportView(studentFeeTable);
        if (studentFeeTable.getColumnModel().getColumnCount() > 0) {
            studentFeeTable.getColumnModel().getColumn(0).setResizable(false);
            studentFeeTable.getColumnModel().getColumn(1).setResizable(false);
            studentFeeTable.getColumnModel().getColumn(2).setResizable(false);
            studentFeeTable.getColumnModel().getColumn(3).setResizable(false);
            studentFeeTable.getColumnModel().getColumn(4).setResizable(false);
            studentFeeTable.getColumnModel().getColumn(5).setResizable(false);
            studentFeeTable.getColumnModel().getColumn(6).setResizable(false);
            studentFeeTable.getColumnModel().getColumn(7).setResizable(false);
        }

        studentFeeTablePanel.add(studentFeeTableScrollPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 850, 200));

        feesfield.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        feesfield.setForeground(new java.awt.Color(153, 153, 153));
        feesfield.setToolTipText("");
        feesfield.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        feesfield.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                feesfieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                feesfieldFocusLost(evt);
            }
        });
        feesfield.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                feesfieldKeyReleased(evt);
            }
        });
        studentFeeTablePanel.add(feesfield, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 20, 260, 40));

        paidFeeSearchLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        paidFeeSearchLabel.setText("Search");
        studentFeeTablePanel.add(paidFeeSearchLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 20, 60, 40));

        getContentPane().add(studentFeeTablePanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 420, 870, 280));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void crossBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_crossBtnMouseEntered
        // TODO add your handling code here:
        crossBtn.setCursor(new Cursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_crossBtnMouseEntered

    private void studentTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_studentTableMouseClicked
        // TODO add your handling code here:
        int selectedRow = studentTable.getSelectedRow();

        String student_id = studentTable.getValueAt(selectedRow, 0).toString();

        TableRowSorter tableRowSorter = new TableRowSorter(studentFeeTable.getModel());
        studentFeeTable.setRowSorter(tableRowSorter);
        //Sort the record according to index specified by column_index;
        int column_index = 1; //index 1 represents sutdent id
        tableRowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + student_id, column_index));

        populateArrayListAndCourseCombo(student_id);
    }//GEN-LAST:event_studentTableMouseClicked

    private void populateArrayListAndCourseCombo(String student_id) {
        //Populating the ArrayList and courseCombo list....
        //------------------------------------------------------------------------
        courseCombo.removeAllItems();
        courseCombo.addItem("Select Course");
        try {
            studentBridgeList = new ArrayList<>();
            ResultSet rs = new BridgeDaoImpl().getAllRecords();
            BridgeBean bridge;
            while (rs.next()) {
                bridge = new BridgeBean();

                bridge.setBridgeId(rs.getInt("bt_id"));
                BatchBean batch = new BatchDaoImpl().getBatchById(rs.getInt("batch_id"));
                bridge.setBatch(batch);
                CourseBean course = new CourseDaoImpl().getCourseById(rs.getInt("course_id"));
                bridge.setCourse(course);
                ShiftBean shift = new ShiftDaoImpl().getShiftById(rs.getInt("shift_id"));
                bridge.setShift(shift);
                StudentBean student = new StudentDaoImpl().getStudentById(rs.getInt("student_id"));
                bridge.setStudent(student);

                Integer sid = new Integer(student_id);
                if (bridge.getStudent().getStudentId().equals(sid)) {
                    //Adding the bridge item to the course Combo...
                    courseCombo.addItem(bridge.toString());
                    //Adding the bridge to the ArrayList of Type <BridgeBean>
                    studentBridgeList.add(bridge);
                }

            }
        } catch (SQLException sqle) {
            System.out.println(sqle.getMessage());
            System.out.println("Error in Accessing Bridge Dao Result Set");
        }

        //------------------------------------------------------------------------
    }

    private void refreshStudentFeeTable() {

        //removel all the previous rows...
        studentFeeTableModel.setNumRows(0);

        //Setting the width, max_width, minwidth of column at index 0(Fees ID).
        studentFeeTable.getColumnModel().getColumn(0).setWidth(0);
        studentFeeTable.getColumnModel().getColumn(0).setMinWidth(0);
        studentFeeTable.getColumnModel().getColumn(0).setMaxWidth(0);

        //Setting the width, max_width, minwidth of column at index 1(Student ID).        
        studentFeeTable.getColumnModel().getColumn(1).setWidth(0);
        studentFeeTable.getColumnModel().getColumn(1).setMinWidth(0);
        studentFeeTable.getColumnModel().getColumn(1).setMaxWidth(0);

        //Setting the width, max_width, minwidth of column at index 7(Bridge ID).        
        studentFeeTable.getColumnModel().getColumn(7).setWidth(0);
        studentFeeTable.getColumnModel().getColumn(7).setMinWidth(0);
        studentFeeTable.getColumnModel().getColumn(7).setMaxWidth(0);

        try {
            ResultSet rs = new FeesDaoImpl().getAllFees();
            FeesBean fees = new FeesBean();
            while (rs.next()) {
                fees = new FeesBean();

                fees.setFeesId(rs.getInt("fees_id"));

                FeesTypeBean feesType;
                int type_id = rs.getInt("fee_type_id");

                feesType = new FeeTypeDaoImpl().getFeesById(type_id);
                fees.setFeesType(feesType);

                BridgeBean bridge;
                int bt_id = rs.getInt("bt_id");
                bridge = new BridgeDaoImpl().getBridgeById(bt_id);

                fees.setBridgeId(bridge);

                fees.setFeesAmount(rs.getDouble("amount"));
                fees.setDateOfPayment(rs.getString("date_of_paid"));
                fees.setNumOfMonths(rs.getInt("no_of_months"));

                //   try{
                studentFeeTableModel.addRow(new Object[]{
                    fees.getFeesId(),
                    fees.getBridgeId().getStudent().getStudentId(),
                    fees.getDateOfPayment(),
                    fees.getFeesAmount(),
                    fees.getNumOfMonths(),
                    fees.getFeesType().getFeesTitle(),
                    fees.getBridgeId().toString(),
                    bt_id
                });
                //  }catch(NullPointerException npe){
                //System.out.println(npe.getMessage());
                //    }

            }
        } catch (SQLException sqle) {
            System.out.println("Error in StudentFeesFrame in refreshStudentFeeTable() method...");
            System.out.println(sqle.getMessage());
        }

    }


    private void nameSearchFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_nameSearchFieldFocusGained
        // TODO add your handling code here:
        if (nameSearchField.getText().equals(nameSearchTip)) {
            nameSearchField.setText("");

        }

    }//GEN-LAST:event_nameSearchFieldFocusGained

    private void nameSearchFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_nameSearchFieldFocusLost
        // TODO add your handling code here:
        if (nameSearchField.getText().isEmpty()) {
            nameSearchField.setText(nameSearchTip);
        }
    }//GEN-LAST:event_nameSearchFieldFocusLost

    private void crossBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_crossBtnMouseClicked
        new MainFrame().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_crossBtnMouseClicked

    private void nameSearchFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nameSearchFieldKeyReleased
        // TODO add your handling code here:
        UtilityMethods.searchDataFromTable(studentTable, nameSearchField);
    }//GEN-LAST:event_nameSearchFieldKeyReleased

    private void addlblMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addlblMouseEntered
        // TODO add your handling code here:
        addlbl.setCursor(new Cursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_addlblMouseEntered

    private void printSlipBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_printSlipBtnMouseEntered
        // TODO add your handling code here:
        printSlipBtn.setCursor(new Cursor(Cursor.HAND_CURSOR));

    }//GEN-LAST:event_printSlipBtnMouseEntered

    private void updatelblMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updatelblMouseEntered
        // TODO add your handling code here:
        updatelbl.setCursor(new Cursor(Cursor.HAND_CURSOR));

    }//GEN-LAST:event_updatelblMouseEntered

    private void resetlblMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resetlblMouseEntered
        // TODO add your handling code here:
        resetlbl.setCursor(new Cursor(Cursor.HAND_CURSOR));

    }//GEN-LAST:event_resetlblMouseEntered

    private void addlblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addlblMouseClicked
        // TODO add your handling code here:       
        if (validateForm()) {

            try {
                FeesBean fees = new FeesBean();

                Double feesAmount = Double.parseDouble(feesAmountField.getText());
                Integer noOfMonths = new Integer(numberOfMonthsCombo.getSelectedItem().toString());

                fees.setDateOfPayment(DateFormatter.formatDate(datetxt.getDate()));
                fees.setFeesAmount(feesAmount);
                fees.setNumOfMonths(noOfMonths);

                //-----------------------------------------------------------
                //Getting the fees Type form the Array list of Type <FeesType>
                int fees_type_combo_indx = feesTypeCombo.getSelectedIndex();
                FeesTypeBean feesType = feesTypeList.get(fees_type_combo_indx - 1);
                fees.setFeesType(feesType);
                //-----------------------------------------------------------

                //Getting the bridge of Student from Array list of Type <BridgeBean>
                BridgeBean bridge;
                int bridge_type_combo_indx = courseCombo.getSelectedIndex();
                bridge = studentBridgeList.get(bridge_type_combo_indx - 1);
                fees.setBridgeId(bridge);

                fees.setCreatedBy(41);
                fees.setCreatedDate(DateFormatter.formatDate(new Date()));

                int response = new FeesDaoImpl().addFees(fees);
                if (response == 1) {
                    new MessageForm("Success", "Fees Has been Succrssfully Added", "success.png").setVisible(true);
                    clearFields();
                    refreshStudentFeeTable();
                }

            } catch (Exception e) {
//            e.printStackTrace();
//            System.out.println(e.getMessage());
                if (feesAmountField.getText().equals(feesAmountTip) || feesAmountField.getText().equals(feesAmountRequiredTip)) {
                    feesAmountField.setBorder(BorderFactory.createLineBorder(Color.RED, 1));
                    feesAmountField.setForeground(Color.RED);
                    feesAmountField.setText(feesAmountRequiredTip);
                    numberOfMonthsCombo.requestFocus();
                } else {
                    feesAmountField.setBorder(BorderFactory.createLineBorder(Color.RED, 1));
                    feesAmountField.setForeground(Color.RED);
                    feesAmountField.setText(feesAmountCorrectTip);
                    numberOfMonthsCombo.requestFocus();
                }
            }
        }
    }//GEN-LAST:event_addlblMouseClicked

    private boolean validateForm() {
        boolean ok = true;
        if (feesTypeCombo.getSelectedIndex() == 0) {
            feesTypeCombo.setBorder(BorderFactory.createLineBorder(Color.RED, 1));
            ok = false;
        }
        if (courseCombo.getSelectedIndex() == 0) {
            courseCombo.setBorder(BorderFactory.createLineBorder(Color.RED, 1));
            ok = false;
        }
        if (numberOfMonthsCombo.getSelectedIndex() == 0) {
            numberOfMonthsCombo.setBorder(BorderFactory.createLineBorder(Color.RED, 1));
            ok = false;
        }
        return ok;
    }

    private void feesAmountFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_feesAmountFieldFocusGained
        // TODO add your handling code here:
        feesAmountField.setText("");
    }//GEN-LAST:event_feesAmountFieldFocusGained

    private void feesAmountFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_feesAmountFieldFocusLost
        // TODO add your handling code here:
        if (feesAmountField.getText().isEmpty()) {
            feesAmountField.setForeground(new Color(153, 153, 153));
            feesAmountField.setFont(new Font("Century Gothic", Font.PLAIN, 18));
            feesAmountField.setText(feesAmountTip);
        }


    }//GEN-LAST:event_feesAmountFieldFocusLost

    private void printSlipBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_printSlipBtnMouseClicked
        // TODO add your handling code here:

        System.err.println("Success ok");
        int selected_fee_row = studentFeeTable.getSelectedRow();
        int selected_student_row = studentTable.getSelectedRow();

        if (selected_student_row >= 0) {

            if (selected_fee_row >= 0) {

                //Print the Slip using jesper reports...
                String studentName = studentTable.getValueAt(selected_student_row, 1).toString();
                String studentSurname = studentTable.getValueAt(selected_student_row, 2).toString();
                String studentGuardianName = studentTable.getValueAt(selected_student_row, 3).toString();
                String studentCNIC = studentTable.getValueAt(selected_student_row, 4).toString();
                String studentGender = studentTable.getValueAt(selected_student_row, 5).toString();

                Integer fees_id = new Integer(studentFeeTable.getValueAt(selected_fee_row, 0).toString());
                String dateOfPayment = studentFeeTable.getValueAt(selected_fee_row, 2).toString();
                Double amount = new Double(studentFeeTable.getValueAt(selected_fee_row, 3).toString());
                String numberOfMonths = studentFeeTable.getValueAt(selected_fee_row, 4).toString();
                String feesType = studentFeeTable.getValueAt(selected_fee_row, 5).toString();
                String fullCourseName = studentFeeTable.getValueAt(selected_fee_row, 6).toString();
                Integer bt_id = new Integer(studentFeeTable.getValueAt(selected_fee_row, 7).toString());

                //Split the String based upon comma [,]
                String[] decomposedCourse = fullCourseName.split(",");

                try {
                    System.err.println("Success ok");

                    HashMap<String, Object> map = new HashMap<String, Object>();
                    map.put("payment_date", dateOfPayment);
                    map.put("student_name", studentName + "  " + studentSurname);
                    map.put("recipt_no", fees_id);
                    map.put("course_name", decomposedCourse[0].trim());
                    map.put("batch_name", decomposedCourse[1].trim());
                    System.err.println("Success");

                    //Initializing the initial values or default values.
                    map.put("admission_fee", 0.00d);
                    map.put("monthly_fee", 0.00d);
                    map.put("id_card_fee", 0.00d);
                    map.put("form_fee", 0.00d);
                    map.put("certificate_fee", 0.00d);
                    map.put("board_reg_fee", 0.00d);
                    map.put("board_exam_fee", 0.00d);
                    map.put("board_late_fee", 0.00d);
                    map.put("marks_sheet_fee", 0.00d);
                    map.put("test_exam_fee", 0.00d);
                    map.put("other_fee", 0.00d);
                    System.err.println("Success");

                    try {

                        ResultSet rs = new FeesDaoImpl().getRecordForReport(bt_id, dateOfPayment);
                        System.out.println("Result Set Readed...");

                        String dop;
                        Integer fid;
                        Double sum;

                        Double otherFeeTotal = 0.0d;
                        Double total = 0.0;

                        System.out.println("Reading From Result Set");
                        while (rs.next()) {
                            dop = rs.getString("date_of_paid");
                            fid = rs.getInt("fee_type_id");
                            sum = rs.getDouble("sum");

                            //Calculate the total Sum
                            total += sum;

                            switch (fid.intValue()) {
                                case 1: {
                                    map.remove("admission_fee");
                                    map.put("admission_fee", sum);
                                    break;
                                }
                                case 2: {
                                    map.remove("monthly_fee");
                                    map.put("monthly_fee", sum);
                                    break;
                                }
                                case 3: {
                                    map.remove("id_card_fee");
                                    map.put("id_card_fee", sum);
                                    break;
                                }
                                case 4: {
                                    map.remove("form_fee");
                                    map.put("form_fee", sum);
                                    break;
                                }
                                case 5: {
                                    map.remove("board_reg_fee");
                                    map.put("board_reg_fee", sum);
                                    break;
                                }
                                case 6: {
                                    map.remove("board_exam_fee");
                                    map.put("board_exam_fee", sum);
                                    break;
                                }
                                case 7: {
                                    map.remove("board_late_fee");
                                    map.put("board_late_fee", sum);
                                    break;
                                }
                                case 8: {
                                    map.remove("certificate_fee");
                                    map.put("certificate_fee", sum);
                                    break;
                                }
                                case 9: {
                                    map.remove("marks_sheet_fee");
                                    map.put("marks_sheet_fee", sum);
                                    break;
                                }
                                case 10: {
                                    map.remove("test_exam_fee");
                                    map.put("test_exam_fee", sum);
                                    break;
                                }
                                default: {
                                    map.remove("other_fee");
                                    otherFeeTotal += sum;
                                    map.put("other_fee", otherFeeTotal);
                                    break;
                                }
                            }   //End of Switch case...                        
                        }   //End Of While Loop
                        System.err.println("Success");

                        map.put("total", total);

                        String amountInWords = new NumToWord().convert(total.intValue());

                        int lengthOfWords = amountInWords.length();

                        String upper;
                        String lower;
                        if (lengthOfWords <= 36) {
                            upper = amountInWords;
                            lower = "";
                        } else {
                            //Search for space after 36 characters form right to left
                            int indx = amountInWords.lastIndexOf(' ', 36);
                            upper = amountInWords.substring(0, indx);
                            lower = amountInWords.substring(indx);

                        }

                        map.put("in_words_1", upper);
                        map.put("in_words_2", lower);

                    } catch (SQLException sqle) {
                        System.out.println(sqle.getMessage());
                    }
                    System.err.println("Success");

                    System.out.println(map);
                    String reportFileName = "reports\\feeSlip.jasper";
                    System.err.println(reportFileName);
                    //Save the file on desktop
                    String savedFileName = studentName + "  " + dateOfPayment + " Fees Chalan.pdf";

                    String outputFileName = "reports\\" + savedFileName;

                    //Do Compile the jrxml file to .jasper file...
                    //        JasperReport report = JasperCompileManager.compileReport(reportFileName);
                    JasperPrint jasperprint = JasperFillManager.fillReport(reportFileName, map, DBConnection.getConnection());

                    JasperViewer.viewReport(jasperprint, false);
                    OutputStream outstream = new FileOutputStream(outputFileName);
                    JasperExportManager.exportReportToPdfStream(jasperprint, outstream);
                    clearFields();
                } catch (Exception e) {
                    System.out.println("Exception Generated...");
                    System.out.println(e.getMessage());
                }

            } else {
                new MessageForm("Selection Error", "Plese Select Fee From Fees Table", "error.png").setVisible(true);
            }
        } else {
            new MessageForm("Selection Error", "Plese Select Student From Student Table", "error.png").setVisible(true);
        }

    }//GEN-LAST:event_printSlipBtnMouseClicked

    private void updatelblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updatelblMouseClicked
        // TODO add your handling code here:
        int fees_table_selected_row = studentFeeTable.getSelectedRow();
        if (fees_table_selected_row >= 0) {

            if (validateForm()) {
                try {
                    Integer feeId = new Integer(studentFeeTable.getValueAt(fees_table_selected_row, 0).toString());
                    FeesBean fees = new FeesBean();
                    fees.setFeesId(feeId);

                    Double feesAmount = Double.parseDouble(feesAmountField.getText());
                    Integer noOfMonths = new Integer(numberOfMonthsCombo.getSelectedItem().toString());

                    fees.setDateOfPayment(DateFormatter.formatDate(datetxt.getDate()));

                    fees.setFeesAmount(feesAmount);
                    fees.setNumOfMonths(noOfMonths);

                    //-----------------------------------------------------------
                    //Getting the fees Type form the Array list of Type <FeesType>
                    int fees_type_combo_indx = feesTypeCombo.getSelectedIndex();
                    FeesTypeBean feesType = feesTypeList.get(fees_type_combo_indx - 1);
                    fees.setFeesType(feesType);
                    //-----------------------------------------------------------

                    //Getting the bridge of Student from Array list of Type <BridgeBean>
                    BridgeBean bridge;
                    int bridge_type_combo_indx = courseCombo.getSelectedIndex();
                    bridge = studentBridgeList.get(bridge_type_combo_indx - 1);
                    fees.setBridgeId(bridge);

                    fees.setModifiedBy(41);
                    fees.setModifiedDate(DateFormatter.formatDate(new Date()));

                    int response = new FeesDaoImpl().updateFees(fees);
                    if (response == 1) {
                        JOptionPane.showMessageDialog(updatelbl, "Successfully Updated The Fees Record", "Record Updated", JOptionPane.INFORMATION_MESSAGE);
                        clearFields();
                        refreshStudentFeeTable();
                    }

                } catch (Exception e) {
                    System.out.println("Exception in Updating Student Fees Record...");
                    System.out.println(e.getMessage());
                    if (feesAmountField.getText().equals(feesAmountTip) || feesAmountField.getText().equals(feesAmountRequiredTip)) {
                        feesAmountField.setBorder(BorderFactory.createLineBorder(Color.RED, 1));
                        feesAmountField.setForeground(Color.RED);
                        feesAmountField.setText(feesAmountRequiredTip);
                        numberOfMonthsCombo.requestFocus();
                    } else {
                        feesAmountField.setBorder(BorderFactory.createLineBorder(Color.RED, 1));
                        feesAmountField.setForeground(Color.RED);
                        feesAmountField.setText(feesAmountCorrectTip);
                        numberOfMonthsCombo.requestFocus();
                    }

                }
            }
        } else {
            new MessageForm("Selection Error", "Select The Item Form Student Fees Table First", "error.png").setVisible(true);
        }

    }//GEN-LAST:event_updatelblMouseClicked

    private void resetlblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resetlblMouseClicked
        clearFields();
    }//GEN-LAST:event_resetlblMouseClicked

    private void feesTypeComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_feesTypeComboItemStateChanged
        // TODO add your handling code here:
        feesTypeCombo.setBorder(BorderFactory.createEmptyBorder());
    }//GEN-LAST:event_feesTypeComboItemStateChanged

    private void courseComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_courseComboItemStateChanged
        // TODO add your handling code here:
        courseCombo.setBorder(BorderFactory.createEmptyBorder());
    }//GEN-LAST:event_courseComboItemStateChanged

    private void numberOfMonthsComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_numberOfMonthsComboItemStateChanged
        // TODO add your handling code here:
        numberOfMonthsCombo.setBorder(BorderFactory.createEmptyBorder());
    }//GEN-LAST:event_numberOfMonthsComboItemStateChanged

    private void studentFeeTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_studentFeeTableMouseClicked
        // TODO add your handling code here:
        feesTypeCombo.setSelectedItem(studentFeeTable.getValueAt(studentFeeTable.getSelectedRow(), 5));
        courseCombo.setSelectedItem(studentFeeTable.getValueAt(studentFeeTable.getSelectedRow(), 6));
        feesAmountField.setText(studentFeeTable.getValueAt(studentFeeTable.getSelectedRow(), 3).toString());
        try {
            int index = new Integer(studentFeeTable.getValueAt(studentFeeTable.getSelectedRow(), 4).toString());
            numberOfMonthsCombo.setSelectedIndex(index);
        } catch (Exception e) {
            System.err.println(e.getMessage());
        }
        datetxt.setDate(DateFormatter.parseDate(studentFeeTable.getValueAt(studentFeeTable.getSelectedRow(), 2).toString()));
    }//GEN-LAST:event_studentFeeTableMouseClicked

    private void feesfieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_feesfieldFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_feesfieldFocusGained

    private void feesfieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_feesfieldFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_feesfieldFocusLost

    private void feesfieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_feesfieldKeyReleased
        UtilityMethods.searchDataFromTable(studentFeeTable, feesfield);
    }//GEN-LAST:event_feesfieldKeyReleased

    private void deletelblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deletelblMouseClicked
        // TODO add your handling code here:
        int fees_table_selected_row = studentFeeTable.getSelectedRow();
        if (fees_table_selected_row >= 0) {
            Integer feeId = new Integer(studentFeeTable.getValueAt(fees_table_selected_row, 0).toString());
            FeesBean fees = new FeesBean();
            fees.setFeesId(feeId);
            fees.setModifiedBy(41);
            fees.setModifiedDate(DateFormatter.formatDate(new Date()));

            int response = new FeesDaoImpl().deleteFees(fees);
            if (response == 1) {
                JOptionPane.showMessageDialog(updatelbl, "Successfully Updated The Fees Record", "Record Updated", JOptionPane.INFORMATION_MESSAGE);
                clearFields();
                refreshStudentFeeTable();
            }

        } else {
            new MessageForm("Selection Error", "Select The Item From Student Fees Table First", "error.png").setVisible(true);
        }
    }//GEN-LAST:event_deletelblMouseClicked

    private void deletelblMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deletelblMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_deletelblMouseEntered

    public void populateFeesTypeCombo() {
        feesTypeList = new ArrayList<>();

        feesTypeCombo.removeAllItems();
        feesTypeCombo.addItem("Select Fees Type");
        ResultSet rs = new FeeTypeDaoImpl().getAllFeeTypes();
        try {
            FeesTypeBean feesType;
            while (rs.next()) {
                feesType = new FeesTypeBean();

                feesType.setFeesTypeId(rs.getInt("fee_type_id"));
                feesType.setFeesTitle(rs.getString("fee_title"));

                feesTypeList.add(feesType);
                feesTypeCombo.addItem(feesType.getFeesTitle());
            }
        } catch (SQLException sqle) {
            System.out.println("Exception generated in the StudentFeesFrame Module at PopulateFeesTypeCombo() method...");
            System.out.println(sqle.getMessage());
        }

    }

    private void refreshStudentTable() {

        studentTableModel.setNumRows(0);
        studentTable.getColumnModel().getColumn(0).setWidth(0);
        studentTable.getColumnModel().getColumn(0).setMinWidth(0);
        studentTable.getColumnModel().getColumn(0).setMaxWidth(0);

        ResultSet rs = new StudentDaoImpl().getAllStudents();

        try {
            StudentBean student;
            while (rs.next()) {
                student = new StudentBean();
                student.setStudentId(rs.getInt("s_id"));
                student.setStudentName(rs.getString("s_name"));
                student.setSurname(rs.getString("surname"));
                student.setGender(rs.getString("gender"));
                student.setGuardian(rs.getString("guardian"));
                student.setStudentNic(rs.getString("cnic"));
                studentTableModel.addRow(new Object[]{
                    student.getStudentId(),
                    student.getStudentName(),
                    student.getSurname(),
                    student.getGuardian(),
                    student.getStudentNic(),
                    student.getGender()});
            }
        } catch (SQLException sqle) {
            System.out.println("Exception is Student Fee Frame in refreshStudentTable() Method...");
            System.out.println(sqle.getMessage());
        }

    }

    private void clearFields() {
        feesTypeCombo.setSelectedIndex(0);
        courseCombo.setSelectedIndex(0);
        feesAmountField.setText(feesAmountTip);
        numberOfMonthsCombo.setSelectedIndex(0);
        datetxt.setDate(null);
        nameSearchField.setText(nameSearchTip);
        feesfield.setText("");
        studentTable.clearSelection();
        studentFeeTable.clearSelection();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StudentFeeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StudentFeeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StudentFeeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StudentFeeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StudentFeeFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel addlbl;
    private javax.swing.JComboBox<String> courseCombo;
    private javax.swing.JLabel courseLabel;
    private javax.swing.JLabel crossBtn;
    private com.toedter.calendar.JDateChooser datetxt;
    private javax.swing.JLabel deletelbl;
    private javax.swing.JLabel feeAmountLabel;
    private javax.swing.JPanel feeDataEntryPanel;
    private javax.swing.JLabel feeTypeLabel;
    private javax.swing.JTextField feesAmountField;
    private javax.swing.JLabel feesHeader;
    private javax.swing.JComboBox<String> feesTypeCombo;
    private javax.swing.JTextField feesfield;
    private javax.swing.JTextField nameSearchField;
    private javax.swing.JLabel noOfMonthsLabel;
    private javax.swing.JComboBox<String> numberOfMonthsCombo;
    private javax.swing.JLabel paidFeeSearchLabel;
    private javax.swing.JLabel paymentDateLabel;
    private javax.swing.JLabel printSlipBtn;
    private javax.swing.JLabel resetlbl;
    private javax.swing.JLabel searchStudentField;
    private javax.swing.JTable studentFeeTable;
    private javax.swing.JPanel studentFeeTablePanel;
    private javax.swing.JScrollPane studentFeeTableScrollPanel;
    private javax.swing.JTable studentTable;
    private javax.swing.JPanel studentTablePanel;
    private javax.swing.JScrollPane studentTableScorllPanel;
    private javax.swing.JLabel updatelbl;
    // End of variables declaration//GEN-END:variables

    private void hideAllButtons() {
        addlbl.setVisible(false);
        updatelbl.setVisible(false);
        resetlbl.setVisible(false);
        printSlipBtn.setVisible(false);
    }

    private void checkPermissions() {
        List<PermissionBean> permissions = new RolePermissionDaoImpl().getAssignedPermissions(LoginFrame.userBean.getRole());
        for (PermissionBean pb : permissions) {
            if (pb.getPermission().equals("Add Fees")) {
                addlbl.setVisible(true);
            }
            if (pb.getPermission().equals("Update Fees")) {
                updatelbl.setVisible(true);
            }
            if (pb.getPermission().equals("Delete Fees")) {
                resetlbl.setVisible(true);
            }
            if (pb.getPermission().equals("Print Slip")) {
                printSlipBtn.setVisible(true);
            }

        }
    }
}
